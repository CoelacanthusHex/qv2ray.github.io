(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{405:function(n,a,e){"use strict";e.r(a);var t=e(17),o=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"a-few-notes-about-wayland"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-few-notes-about-wayland"}},[n._v("#")]),n._v(" A few notes about Wayland")]),n._v(" "),e("p",[e("strong",[n._v("Note: This section is only relevant for GNU/Linux systems")]),n._v(".")]),n._v(" "),e("h2",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[n._v("#")]),n._v(" Run")]),n._v(" "),e("p",[n._v("Qv2ray is a native Qt5/C++ program, which fully supports the Wayland display protocol. However, for Qv2ray to run under the Wayland protocol, you need a Wayland session (e.g., Gnome session, KDE Wayland session, Sway, etc.), and you also need to install Wayland support for Qt5 (usually the package name "),e("code",[n._v("qt5-wayland")]),n._v(" or "),e("code",[n._v("(qtwayland5")]),n._v(").")]),n._v(" "),e("p",[n._v("If everything is in place, you can now try to run Qv2ray with the Wayland display protocol.")]),n._v(" "),e("h3",{attrs:{id:"gnome-environment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gnome-environment"}},[n._v("#")]),n._v(" Gnome environment")]),n._v(" "),e("p",[n._v("Qt5 programs in a Gnome environment run on Xwayland by default using the Xorg protocol (Xorg's fallback mode under Wayland). Therefore, to get Qv2ray to run under the Wayland display protocol you need to run the following command.")]),n._v(" "),e("p",[n._v("``bash\nQT_QPA_PLATFORM=wayland qv2ray")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nIt works as follows.\n[! [Qv2ray On Wayland in Gnome Session](https://s1.ax1x.com/2020/11/07/BIuwb4.png)](https://imgchr.com/i/BIuwb4)\n\nYou can add `QT_QPA_PLATFORM=wayland` to Qv2ray's desktop file so that Qv2ray can use the Wayland display protocol at boot time.\n\n### KDE Plasma Wayland Sessions\n\nTheoretically, it defaults to the Wayland display protocol, but this has not been verified. Qv2ray is specified to follow the Wayland display protocol in the same way as above.\n\n### Sway\n\nNot tested, contributions from those with experience in using it are welcome. Specifying Qv2ray to follow the Wayland display protocol is the same as above.\n\n## Troubleshooting\n\n### Cannot run on Wayland\n\nYou may be using an Xorg-based desktop session, or you don't have the Wayland component for Qt5 installed. Or, you have statically compiled Qv2ray, but have not included the Wayland component for Qt5.\n\n### Does running under the Wayland display protocol speed up wall-climbing?\n\nNo, thanks.\n\n### No tray icon under Gnome\n\nThe Gnome desktop does not support tray icons by nature. Ubuntu has made an [extension](https://extensions.gnome.org/extension/1301/ubuntu-appindicators/) to support a Gnome tray extension based on DBus communication. The result of testing so far is that the extension will display trays from Qv2ray running on Wayland under Arch Linux, but may not display them under the custom Ubuntu Wayland session. This is an upstream issue and cannot be addressed by this project.\n\n## Clipboard\n\nSince Wayland does not have a unified clipboard interface, it may not be possible to use the right-click menu to copy and paste between applications running in Wayland. As a workaround, you can use `Ctrl + C/V` to copy and paste. Also note that when copying and pasting, open both the copy source window and the paste target window at the same time.\n\n\nTranslated with www.DeepL.com/Translator (free version)\n")])])])])}),[],!1,null,null,null);a.default=o.exports}}]);