(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{421:function(e,a,t){"use strict";t.r(a);var v=t(17),s=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"手动构建-qv2ray-项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手动构建-qv2ray-项目"}},[e._v("#")]),e._v(" 手动构建 Qv2ray 项目")]),e._v(" "),t("p",[e._v("你可手动构建 Qv2ray，以支持我们尚未支持的平台。")]),e._v(" "),t("h2",{attrs:{id:"构建依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建依赖"}},[e._v("#")]),e._v(" 构建依赖")]),e._v(" "),t("p",[e._v("首先，请确保你的环境满足以下依赖的要求：")]),e._v(" "),t("ul",[t("li",[e._v("Qt 版本 "),t("code",[e._v(">= 5.11")]),e._v(" （推荐 "),t("code",[e._v("5.13")]),e._v(" 或 "),t("code",[e._v("5.14")]),e._v("）")]),e._v(" "),t("li",[e._v("gRPC 与 protobuf\n"),t("ul",[t("li",[e._v("在 Windows 下构建 Qv2ray 时，"),t("code",[e._v("gRPC")]),e._v(" 和 "),t("code",[e._v("protobuf")]),e._v(" 两者都需要。")]),e._v(" "),t("li",[e._v("在 Linux 和 macOS 下构建 Qv2ray 时，只有 "),t("code",[e._v("protobuf")]),e._v(" 是必须的，而 "),t("code",[e._v("gRPC")]),e._v(" 可以替换成一个自制的库 "),t("code",[e._v("libqvb")]),e._v(" 。")])])]),e._v(" "),t("li",[t("code",[e._v("OpenSSL")]),e._v(" "),t("ul",[t("li",[e._v("如果你没有 "),t("code",[e._v("OpenSSL")]),e._v("，构建可能 "),t("strong",[e._v("不会失败")]),e._v("，因为它是一个 "),t("strong",[e._v("运行时依赖")]),e._v("。")])])])]),e._v(" "),t("p",[e._v("其次，编译器要支持并使用 C++17，需要包括嵌套命名空间（nested namespace）、结构化绑定（tuple expansion）以及内联变量（inline variable）等特性的支持：")]),e._v(" "),t("ul",[t("li",[e._v("Linux 下的 "),t("code",[e._v("gcc7")]),e._v(" 即可支持。")]),e._v(" "),t("li",[e._v("Windows 下的 MSVC 需要 "),t("code",[e._v(">=14.2")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[e._v("别用 gRPC 1.26.0")]),e._v(" "),t("p",[e._v("注意: 这个版本的 gRPC 有一个已知问题，会导致 Qv2ray 运行后无法退出，并使得 CPU 空转，严重增加系统负担。\n切勿使用 gRPC 1.26.0。")])]),e._v(" "),t("h2",{attrs:{id:"获取源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取源码"}},[e._v("#")]),e._v(" 获取源码")]),e._v(" "),t("p",[e._v("有多种方式获取 Qv2ray 的源码。你可以通过下面的任意方式获取:")]),e._v(" "),t("ul",[t("li",[e._v("Git 客户端: "),t("code",[e._v("git clone https://github.com/Qv2ray/Qv2ray.git")])]),e._v(" "),t("li",[e._v("通过 GitHub 直接下载仓库上某个分支的源码（不建议这样做，因为它缺少 Git submodule 的元数据）")])]),e._v(" "),t("blockquote",[t("p",[e._v("提示：")]),e._v(" "),t("p",[e._v("你可以在 "),t("code",[e._v("git clone")]),e._v(" 命令后附加一些选项：附加 "),t("code",[e._v("--branch <分支/标签>")]),e._v(" 以在克隆创建后检出到指定分支/标签，附加 "),t("code",[e._v("--recursive/--recurse-submodules")]),e._v(" 以在克隆创建后递归初始化和克隆所有子模块。")])]),e._v(" "),t("h2",{attrs:{id:"构建步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建步骤"}},[e._v("#")]),e._v(" 构建步骤")]),e._v(" "),t("p",[e._v("假设你：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("安装了 Qt 并且配置了相应的环境变量，从而在 Terminal/Shell/Command Prompt 中至少能成功执行 "),t("code",[e._v("qmake --version")]),e._v("；")]),e._v(" "),t("p",[e._v("如果没有, 你需要准备一套开发环境:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Debian/Ubuntu/RaspberryPiOS: 使用 apt 安装:")]),e._v(" "),t("p",[t("code",[e._v("apt install qtbase5-dev qttools5-dev build-essential cmake git pkg-config libssl-dev")])])])])]),e._v(" "),t("li",[t("p",[e._v("正确获取了源码和所有的子模块 (submodule)。")])])]),e._v(" "),t("h3",{attrs:{id:"构建之前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建之前"}},[e._v("#")]),e._v(" 构建之前")]),e._v(" "),t("ul",[t("li",[e._v("Arch Linux：使用 pacman 安装这两个包: "),t("code",[e._v("pacman -S grpc protobuf")])]),e._v(" "),t("li",[e._v("Debian/Ubuntu/RaspberryPiOS: 安装这两个包: "),t("code",[e._v("apt install libprotobuf-dev libgrpc++-dev")])]),e._v(" "),t("li",[e._v("macOS：通过 Homebrew 安装这两个包: "),t("code",[e._v("brew install grpc protobuf")])]),e._v(" "),t("li",[e._v("Windows:\n"),t("ul",[t("li",[e._v("你可以从 "),t("a",{attrs:{href:"https://github.com/Qv2ray/Qv2ray-deps",target:"_blank",rel:"noopener noreferrer"}},[e._v("Qv2ray-deps"),t("OutboundLink")],1),e._v(" 这个仓库 Release 中下载  "),t("a",{attrs:{href:"https://github.com/Qv2ray/Qv2ray-deps/releases/download/release/grpc-x64-windows.7z",target:"_blank",rel:"noopener noreferrer"}},[e._v("gRPC dependency package - x64"),t("OutboundLink")],1),e._v(" 或者 "),t("a",{attrs:{href:"https://github.com/Qv2ray/Qv2ray-deps/releases/download/release/grpc-x86-windows.7z",target:"_blank",rel:"noopener noreferrer"}},[e._v("gRPC dependency package - x86"),t("OutboundLink")],1),e._v("，然后解压到 "),t("code",[e._v("libs/x**-windows/")]),e._v(" 目录, 其中 "),t("code",[e._v("**")]),e._v(" 是 "),t("code",[e._v("86")]),e._v(" 或 "),t("code",[e._v("64")]),e._v("；或者：")]),e._v(" "),t("li",[e._v("你可以使用 "),t("code",[e._v("vcpkg install grpc")]),e._v(" 在 Windows 上通过 MSVC 手动构建 "),t("code",[e._v("gRPC")]),e._v("，不过这通常会花点时间，且需要稳定的网络环境（没梯子就算了）。")])])])]),e._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[e._v("Windows: Qv2ray-deps -> MSVC2019+")]),e._v(" "),t("p",[e._v("若你选择直接使用 Qv2ray-deps 项目中的预编译包，你至少需要使用 MSVC2019 来进行 Linking，否则可能会遇到各种谜之问题。\n这是因为 GitHub Actions 上用于编译 Qv2ray-deps 项目的编译器是 MSVC2019。\n若你不想安装 MSVC2019+，你可以选择使用 vcpkg 手动编译安装，祝君好运。")])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("确保你安装了 "),t("code",[e._v("grpc_cpp_plugin")]),e._v(" 和 "),t("code",[e._v("protoc")]),e._v(", 它们在下一步中由 "),t("code",[e._v("cmake")]),e._v(" 使用.")])]),e._v(" "),t("h3",{attrs:{id:"构建脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建脚本"}},[e._v("#")]),e._v(" 构建脚本")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" Qv2ray\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 如果你在此前的 git clone 命令中附加了 "--recursive" 选项, 则你可以跳过下面一步。')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" submodule update --init --recursive "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 拉取然后检出所有子模块到对应的目录。例如，Git 仓库目录下的 3rdparty/ 目录。")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" build "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 调用cmake")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 有不少选项可用, 如果需要,建议使用cmake-gui.")]),e._v("\ncmake "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 例如： "cmake .. -DCMAKE_INSTALL_PREFIX=" + 想要的安装目录。')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 又如： "cmake .. -DCMAKE_BUILD_TYPE=Release" 如果你想编译一个 Release 构建。')]),e._v("\n\ncmake --build "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 可以再附加 `--parallel N` 选项加速构建.")]),e._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("莫急！")]),e._v(" "),t("p",[e._v("在 Windows 和 macOS 上经过这些步骤后，你可能无法直接运行 "),t("code",[e._v("qv2ray.exe")]),e._v(" 或者打开 "),t("code",[e._v("qv2ray.app")]),e._v(" 包。\n你还需要参考下面的部署步骤以为 Qv2ray 补全所需的运行时依赖。")])]),e._v(" "),t("h2",{attrs:{id:"部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[e._v("#")]),e._v(" 部署")]),e._v(" "),t("p",[e._v("在打包 Qv2ray 或使用它之前，还有一点事要做，即运行下面命令：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("cmake --install "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 注意 "--install" 选项后面的点')]),e._v("\n")])])]),t("p",[e._v("在 Windows/macOS 上，这会自动复制所有依赖到一个目录。这个目录是你之前使用 "),t("code",[e._v("CMAKE_INSTALL_PREFIX")]),e._v(" 命令行参数或 CMake GUI 工具指定的。如果要想改变那个目录，你需要重新生产 CMake 缓存文件。")])])}),[],!1,null,null,null);a.default=s.exports}}]);